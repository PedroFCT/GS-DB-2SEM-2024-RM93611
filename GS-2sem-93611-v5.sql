--RM: 93611
--Nome: Pedro Faria Chagas Terra
--Turma: 2TDSPF
--Grupo: *Trabalho feito individualmente*.

-----------------------
------GreenWise--------
-----------------------

set serveroutput on;

--Criacao das tabelas (favor dropar todas antes de iniciar a criacao)

drop table auditoria cascade constraints;
drop table usuarios cascade constraints;
drop table fontes_energia cascade constraints;
drop table projetos cascade constraints;
drop table investimentos cascade constraints;
drop table consumo_producao cascade constraints;

CREATE TABLE usuarios (
    id_usuario NUMBER PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    tipo_usuario VARCHAR2(20) CHECK (tipo_usuario IN ('Consumidor', 'Produtor', 'Admin')),
    email VARCHAR2(150) UNIQUE NOT NULL,
    cpf VARCHAR2(11) UNIQUE NOT NULL,
    telefone VARCHAR2(15),
    data_criacao DATE DEFAULT SYSDATE NOT NULL
);

CREATE TABLE fontes_energia (
    id_fonte NUMBER PRIMARY KEY,
    tipo_fonte VARCHAR2(50) NOT NULL,
    capacidade_kwh NUMBER NOT NULL, 
    eficiencia_percentual NUMBER(5, 2), 
    impacto_ambiental VARCHAR2(200)
);

CREATE TABLE projetos (
    id_projeto NUMBER PRIMARY KEY,
    id_usuario NUMBER NOT NULL, 
    id_fonte NUMBER,
    custo_estimado NUMBER,
    descricao VARCHAR2(255),
    status VARCHAR2(20) DEFAULT 'Ativo' CHECK (status IN ('Ativo', 'Inativo')),
    data_inicio DATE DEFAULT SYSDATE,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE,
    FOREIGN KEY (id_fonte) REFERENCES fontes_energia(id_fonte) ON DELETE CASCADE
);

CREATE TABLE consumo_producao (
  id_consumo_producao NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_projeto NUMBER NOT NULL, 
  data_registro DATE NOT NULL, 
  consumo NUMBER NOT NULL, 
  producao NUMBER NOT NULL,
  CONSTRAINT fk_projeto FOREIGN KEY (id_projeto) REFERENCES projetos (id_projeto)
);

CREATE TABLE investimentos (
    id_investimento NUMBER PRIMARY KEY,
    id_usuario NUMBER NOT NULL,
    id_projeto NUMBER NOT NULL,
    valor_investido NUMBER(15, 2) NOT NULL,
    data_investimento DATE DEFAULT SYSDATE,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE,
    FOREIGN KEY (id_projeto) REFERENCES projetos(id_projeto) ON DELETE CASCADE
);

CREATE TABLE auditoria (
    id_auditoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tabela_alterada VARCHAR2(50),
    tipo_operacao VARCHAR2(10),
    dados_antigos CLOB,
    dados_novos CLOB,
    data_operacao TIMESTAMP DEFAULT SYSTIMESTAMP
);

--------------------------------------------------------------------------------

--sequences para os id's (dropar primeiro para evitar problemas na insercao de dados)

drop sequence seq_fontes_energia;
drop sequence seq_id_fonte;
drop sequence seq_usuarios;
drop sequence seq_projetos;
drop sequence seq_investimentos;

COMMIT;

CREATE SEQUENCE seq_fontes_energia
START WITH 1
INCREMENT BY 1
NOCACHE;

CREATE SEQUENCE seq_id_fonte
START WITH 1
INCREMENT BY 1
NOCACHE;

CREATE SEQUENCE seq_usuarios
START WITH 1
INCREMENT BY 1
NOCACHE;

CREATE SEQUENCE seq_projetos
START WITH 1
INCREMENT BY 1
NOCACHE;

CREATE SEQUENCE seq_investimentos
START WITH 1 
INCREMENT BY 1 
NOCACHE; 

COMMIT;

CREATE OR REPLACE TRIGGER trg_auto_id_fonte
BEFORE INSERT ON fontes_energia
FOR EACH ROW
BEGIN
    IF :NEW.id_fonte IS NULL THEN
        :NEW.id_fonte := seq_id_fonte.NEXTVAL;
    END IF;
END;

--------------------------------------------------------------------------------

--procedures e function (empacotadas)

CREATE OR REPLACE PACKAGE pkg_greenwise AS

    PROCEDURE insere_usuario(p_nome VARCHAR2, p_email VARCHAR2, p_cpf VARCHAR2);

    PROCEDURE insere_projeto(p_id_usuario NUMBER, p_descricao VARCHAR2, p_custo_estimado NUMBER, p_id_fonte NUMBER);

    PROCEDURE insere_fonte_energia(p_tipo_fonte VARCHAR2, p_capacidade_kwh NUMBER);
    
    PROCEDURE insere_investimento (p_id_usuario IN NUMBER, p_id_projeto IN NUMBER, p_valor_investido IN NUMBER, p_data IN DATE);
    
    PROCEDURE insere_consumo_producao (p_id_projeto IN NUMBER, p_data IN DATE,
        p_consumo IN NUMBER, p_producao IN NUMBER);

    FUNCTION calc_energia_anual(p_capacidade_kwh NUMBER, p_dias_operacao NUMBER) RETURN NUMBER;

    FUNCTION valida_email(p_email VARCHAR2) RETURN VARCHAR2;
    
    FUNCTION diferenca_liquida (p_id_projeto IN NUMBER) RETURN NUMBER;

    PROCEDURE exportar_json;

    
END pkg_greenwise;


COMMIT;


CREATE OR REPLACE PACKAGE BODY pkg_greenwise AS

    -- Procedure para inserir usuários
    PROCEDURE insere_usuario(p_nome VARCHAR2, p_email VARCHAR2, p_cpf VARCHAR2) IS
    BEGIN
        INSERT INTO usuarios (id_usuario, nome, email, cpf)
        VALUES (seq_usuarios.NEXTVAL, p_nome, p_email, p_cpf);
        
        COMMIT;
        
        EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      DBMS_OUTPUT.PUT_LINE('Erro: O CPF ' || p_cpf || ' já está registrado.');
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Erro inesperado ao inserir o usuário: ' || SQLERRM);
      ROLLBACK;
    END;

    -- Procedure para inserir projetos
    PROCEDURE insere_projeto(p_id_usuario NUMBER, p_descricao VARCHAR2,p_custo_estimado NUMBER, p_id_fonte NUMBER) IS
    BEGIN
        INSERT INTO projetos (id_projeto, id_usuario, descricao,custo_estimado, id_fonte)
        VALUES (seq_projetos.NEXTVAL, p_id_usuario, p_descricao,p_custo_estimado, p_id_fonte);
    END;

    -- Procedure para inserir fontes de energia
    PROCEDURE insere_fonte_energia(p_tipo_fonte VARCHAR2, p_capacidade_kwh NUMBER) IS
    BEGIN
        INSERT INTO fontes_energia (id_fonte, tipo_fonte, capacidade_kwh)
        VALUES (seq_fontes_energia.NEXTVAL, p_tipo_fonte, p_capacidade_kwh);
    END;
    
    -- Procedure para inserir investimento
    PROCEDURE insere_investimento (
        p_id_usuario IN NUMBER,
        p_id_projeto IN NUMBER,
        p_valor_investido IN NUMBER,
        p_data IN DATE
    ) AS
    BEGIN
    
    INSERT INTO investimentos (id_investimento,id_usuario, id_projeto, valor_investido, data_investimento)
    VALUES (seq_investimentos.NEXTVAL, p_id_usuario, p_id_projeto, p_valor_investido, p_data);

    COMMIT;

    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
         DBMS_OUTPUT.PUT_LINE('Erro: Já existe um investimento registrado para o projeto ' || p_id_projeto);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro inesperado ao inserir o investimento: ' || SQLERRM);
    ROLLBACK;
END insere_investimento;

    PROCEDURE insere_consumo_producao (
        p_id_projeto IN NUMBER,
        p_data IN DATE,
        p_consumo IN NUMBER,
        p_producao IN NUMBER
    ) AS
    BEGIN
  
    INSERT INTO consumo_producao (id_projeto, data_registro, consumo, producao)
    VALUES (p_id_projeto, p_data, p_consumo, p_producao);

    COMMIT;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Erro: Projeto não encontrado.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro inesperado ao registrar consumo/produção: ' || SQLERRM);
    ROLLBACK;
END insere_consumo_producao;


    -- Função para calcular energia anual
    FUNCTION calc_energia_anual(p_capacidade_kwh NUMBER, p_dias_operacao NUMBER) RETURN NUMBER IS
        v_energia_anual NUMBER;
    BEGIN
        IF p_capacidade_kwh <= 0 OR p_dias_operacao <= 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'Os parâmetros devem ser positivos.');
        END IF;

        v_energia_anual := p_capacidade_kwh * p_dias_operacao * 24;

        RETURN v_energia_anual;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002, 'Erro ao calcular energia anual: ' || SQLERRM);
    END;

    -- Função para validar e-mails
    FUNCTION valida_email(p_email VARCHAR2) RETURN VARCHAR2 IS
        v_regex_pattern CONSTANT VARCHAR2(100) := '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$';
    BEGIN
        IF REGEXP_LIKE(p_email, v_regex_pattern) THEN
            RETURN 'E-mail válido';
        ELSE
            RETURN 'E-mail inválido';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 'Erro ao validar e-mail: ' || SQLERRM;
    END;
    
    FUNCTION diferenca_liquida (
  p_id_projeto IN NUMBER
) RETURN NUMBER AS
  v_diferenca NUMBER;
BEGIN
  -- Calcula a diferença total de produção e consumo
  SELECT SUM(producao - consumo)
  INTO v_diferenca
  FROM consumo_producao
  WHERE id_projeto = p_id_projeto;

    RETURN v_diferenca;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Erro: Nenhum dado encontrado para o projeto ' || p_id_projeto);
        RETURN NULL;
     WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro inesperado ao calcular diferença líquida: ' || SQLERRM);
        RETURN NULL;
    END diferenca_liquida;

    --Funcao para exportação em JSON
    PROCEDURE exportar_json IS
        l_json CLOB;
        CURSOR projetos_cur IS
        SELECT p.id_projeto, p.descricao, p.custo_estimado, f.tipo_fonte
        FROM projetos p
        JOIN fontes_energia f ON p.id_fonte = f.id_fonte;
        BEGIN
  
        l_json := '[';

        FOR projeto_rec IN projetos_cur LOOP
            l_json := l_json || '{"id_projeto": ' || projeto_rec.id_projeto ||
                         ', "descricao": "' || projeto_rec.descricao || '"' ||
                         ', "custo_estimado": ' || projeto_rec.custo_estimado ||
                         ', "tipo_fonte": "' || projeto_rec.tipo_fonte || '"},';
        END LOOP;

  -- Remove a última vírgula e fecha o JSON
        IF l_json LIKE '%,' THEN
            l_json := SUBSTR(l_json, 1, LENGTH(l_json) - 1);
        END IF;
        l_json := l_json || ']';

        DBMS_OUTPUT.put_line(l_json);
        EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.put_line('Erro ao exportar JSON: ' || SQLERRM);
    END exportar_json;

END pkg_greenwise;

COMMIT;

--------------------------------------------------------------------------------

--TRIGGERS de auditoria

CREATE OR REPLACE TRIGGER trg_auditoria_usuarios
AFTER INSERT OR UPDATE OR DELETE ON usuarios
FOR EACH ROW
DECLARE
    v_tipo_operacao VARCHAR2(10); 
    v_dados_antigos CLOB;
    v_dados_novos CLOB;
BEGIN

    IF INSERTING THEN
        v_tipo_operacao := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacao := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacao := 'DELETE';
    END IF;

    IF DELETING OR UPDATING THEN
        v_dados_antigos := JSON_OBJECT(
            'id_usuario' VALUE :OLD.id_usuario,
            'nome' VALUE :OLD.nome,
            'email' VALUE :OLD.email
        );
    END IF;

    IF INSERTING OR UPDATING THEN
        v_dados_novos := JSON_OBJECT(
            'id_usuario' VALUE :NEW.id_usuario,
            'nome' VALUE :NEW.nome,
            'email' VALUE :NEW.email
        );
    END IF;

    INSERT INTO auditoria (tabela_alterada, tipo_operacao, dados_antigos, dados_novos)
    VALUES ('usuarios', v_tipo_operacao, v_dados_antigos, v_dados_novos);
END;

CREATE OR REPLACE TRIGGER trg_auditoria_projetos
AFTER INSERT OR UPDATE OR DELETE ON projetos
FOR EACH ROW
DECLARE
    v_tipo_operacao VARCHAR2(10);
    v_dados_antigos CLOB;
    v_dados_novos CLOB;
BEGIN
    IF INSERTING THEN
        v_tipo_operacao := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacao := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacao := 'DELETE';
    END IF;

    IF DELETING OR UPDATING THEN
        v_dados_antigos := JSON_OBJECT(
            'id_projeto' VALUE :OLD.id_projeto,
            'id_usuario' VALUE :OLD.id_usuario,
            'descricao' VALUE :OLD.descricao
        );
    END IF;

    IF INSERTING OR UPDATING THEN
        v_dados_novos := JSON_OBJECT(
            'id_projeto' VALUE :NEW.id_projeto,
            'id_usuario' VALUE :NEW.id_usuario,
            'descricao' VALUE :NEW.descricao
        );
    END IF;

    INSERT INTO auditoria (tabela_alterada, tipo_operacao, dados_antigos, dados_novos)
    VALUES ('projetos', v_tipo_operacao, v_dados_antigos, v_dados_novos);
END;

CREATE OR REPLACE TRIGGER trg_auditoria_fontes_energia
AFTER INSERT OR UPDATE OR DELETE ON fontes_energia
FOR EACH ROW
DECLARE
    v_tipo_operacao VARCHAR2(10);
    v_dados_antigos CLOB;
    v_dados_novos CLOB;
BEGIN
    IF INSERTING THEN
        v_tipo_operacao := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacao := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacao := 'DELETE';
    END IF;

    IF DELETING OR UPDATING THEN
        v_dados_antigos := JSON_OBJECT(
            'id_fonte' VALUE :OLD.id_fonte,
            'tipo_fonte' VALUE :OLD.tipo_fonte,
            'capacidade_kwh' VALUE :OLD.capacidade_kwh
        );
    END IF;

    IF INSERTING OR UPDATING THEN
        v_dados_novos := JSON_OBJECT(
            'id_fonte' VALUE :NEW.id_fonte,
            'tipo_fonte' VALUE :NEW.tipo_fonte,
            'capacidade_kwh' VALUE :NEW.capacidade_kwh
        );
    END IF;

    INSERT INTO auditoria (tabela_alterada, tipo_operacao, dados_antigos, dados_novos)
    VALUES ('fontes_energia', v_tipo_operacao, v_dados_antigos, v_dados_novos);
END;

COMMIT;

--------------------------------------------------------------------------------

--POPULANDO TABELAS (rodar na ordem que se encontram, um de cada vez).

  --USUARIOS

BEGIN
    pkg_greenwise.insere_usuario('Lucas Almeida', 'lucas.almeida@gmail.com', '12345678901');
    pkg_greenwise.insere_usuario('Carla Dias', 'carla.dias@gmail.com', '09876543210');
    pkg_greenwise.insere_usuario('João Santos', 'joao.santos@gmail.com', '11122233344');
    pkg_greenwise.insere_usuario('Maria Oliveira', 'maria.oliveira@gmail.com', '55566677788');
    pkg_greenwise.insere_usuario('Ana Costa', 'ana.costa@gmail.com', '99988877766');
    pkg_greenwise.insere_usuario('Ana Maria', 'ana.maria@gmail.com', '99988878766');
END;
COMMIT;

  --FONTES DE ENERGIA

BEGIN
    pkg_greenwise.insere_fonte_energia('Solar Fotovoltaica', 10000);
    pkg_greenwise.insere_fonte_energia('Eólica', 7000);
    pkg_greenwise.insere_fonte_energia('Hidrelétrica', 15000);
    pkg_greenwise.insere_fonte_energia('Biomassa', 5000);
    pkg_greenwise.insere_fonte_energia('Geotérmica', 8000);
END;
COMMIT;

  --PROJETOS

BEGIN
    pkg_greenwise.insere_projeto(1, 'Microgrid Residencial', 50000, 1); -- Solar
    pkg_greenwise.insere_projeto(2, 'Fazenda Eólica', 120000, 2);        -- Eólica
    pkg_greenwise.insere_projeto(3, 'Usina Hidrelétrica', 300000 , 3);    -- Hidrelétrica
    pkg_greenwise.insere_projeto(4, 'Bioenergia em Comunidades', 80000, 4); -- Biomassa
    pkg_greenwise.insere_projeto(5, 'Exploração Geotérmica', 200000, 5); -- Geotérmica
END;
COMMIT;

  --INVESTIMENTOS

BEGIN
  pkg_greenwise.insere_investimento(1, 1, 10000, TO_DATE('2024-01-15', 'YYYY-MM-DD'));
  pkg_greenwise.insere_investimento(2, 2, 25000, TO_DATE('2024-02-01', 'YYYY-MM-DD'));
  pkg_greenwise.insere_investimento(3, 3, 5000, TO_DATE('2024-03-10', 'YYYY-MM-DD'));
  pkg_greenwise.insere_investimento(4, 4, 7500, TO_DATE('2024-03-15', 'YYYY-MM-DD'));
  pkg_greenwise.insere_investimento(5, 5, 12000, TO_DATE('2024-04-01', 'YYYY-MM-DD'));
END;
COMMIT;

   --CONSUMO_PRODUCAO

BEGIN
  pkg_greenwise.insere_consumo_producao(1, TO_DATE('2024-01-15', 'YYYY-MM-DD'), 500, 600);
  pkg_greenwise.insere_consumo_producao(1, TO_DATE('2024-02-15', 'YYYY-MM-DD'), 700, 750);
  pkg_greenwise.insere_consumo_producao(2, TO_DATE('2024-01-20', 'YYYY-MM-DD'), 400, 500);
  pkg_greenwise.insere_consumo_producao(2, TO_DATE('2024-02-25', 'YYYY-MM-DD'), 650, 700);
  pkg_greenwise.insere_consumo_producao(3, TO_DATE('2024-01-30', 'YYYY-MM-DD'), 300, 450);
  pkg_greenwise.insere_consumo_producao(3, TO_DATE('2024-03-05', 'YYYY-MM-DD'), 800, 850);
END;

COMMIT;
--------------------------------------------------------------------------------

--Testes

-- testando as functions

SELECT pkg_greenwise.calc_energia_anual(5000, 300) AS energia_anual FROM DUAL;

SELECT pkg_greenwise.valida_email('email.valido@gmail.com') AS resultado FROM DUAL;

SELECT pkg_greenwise.valida_email('email_invalido.com') AS resultado FROM DUAL;

DECLARE
    v_diferenca NUMBER;
BEGIN

    v_diferenca := pkg_greenwise.diferenca_liquida(1);
    DBMS_OUTPUT.PUT_LINE('A diferença líquida para o projeto é: ' || v_diferenca || ' kWh');
    
END;

DECLARE
  v_diferenca NUMBER;
BEGIN
  v_diferenca := pkg_greenwise.diferenca_liquida(1);
  DBMS_OUTPUT.PUT_LINE('Diferença líquida para o projeto 1: ' || v_diferenca || ' kWh');
END;


--EXPORTACAO PARA O MONGO DB

BEGIN
  pkg_greenwise.exportar_json;
END;





